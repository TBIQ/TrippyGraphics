{"version":3,"sources":["threejs/Circle.js","threejs/util.js","threejs/SpiralizationEngine.js","threejs/SpiralizationEngineConfigurations.js","App.js","serviceWorker.js","index.js"],"names":["Circle","radius","pos","THREE","caxis","raxis","circle","tracer","geometry","material","color","side","radians","this","copy","applyAxisAngle","multiplyScalar","add","render","scene","mesh","x","y","z","position","set","stringToThreeColor","colorStr","r","g","b","SpiralizationEngine","container","start","origin","colorsArr","colorsObj","_","range","length","reduce","acc","cur","i","setCameraStateToDefaults","camera","nearClipDistance","farClipDistance","fovDegrees","fov","aspect","window","innerWidth","innerHeight","near","far","updateProjectionMatrix","setAnimationStateToDefaults","cameraStepPerFrame","rotate","glide","forward","rotateStep","Math","PI","setEngineDerivedProperties","angularStep","numAngularSteps","angularIndicesToRender","setEngineToDefaultState","planeHeight","numObjectsPerAngle","angularOffset","uniformZSpacing","focalDilationFrontFar","focalDilationFrontNear","parabolicDistortion","lensWidthFar","lensWidthNear","lensAngularStep","planeSetByAngularIndex","geometries","transforms","uniforms","value","map","renderer","setSize","appendChild","domElement","threejsSetupBasics","clock","clearScene","children","remove","vertexShader","document","getElementById","textContent","cyclingDiscreteGradientShader","cyclingGradientMaterial","fragmentShader","defines","NUMCOLORS","initPos","nPos","fPos","planeMath","zMat4","mat4","q1","q2","v0","v1","v2","cross","center","v4","v5","unitZ","planeGeometry","endVertices","renderObjects","config","Object","keys","k","cameraPos","cNear","cMiddle","cFar","rad","p1","p2","p3","planeWidth","distanceTo","plane","setFromCoplanarPoints","crossVectors","subVectors","normalize","normal","negate","lerpVectors","addVectors","transform","setFromUnitVectors","multiply","makeTranslation","makeRotationFromQuaternion","vertices","applyMatrix4","sub","identity","premultiply","computeTransforms","j","applyMatrix","push","renderPlanes","cameraX","cameraY","cameraZ","lookAt","fullReRender","enableGuiControls","gui","dat","step","listen","c1","c2","c3","c4","c5","c6","c8","c10","onChange","v","colorC","addFolder","addColor","partial","index","newColor","colors","animate","requestAnimationFrame","time","getDelta","rotation","configs","Option","Select","Header","Layout","Content","App","threejsContainer","useRef","useState","initialized","setInitialized","configNames","setConfigNames","selectedConfig","setSelectedConfig","engine","setEngine","useEffect","a","current","startEngine","style","padding","borderBottom","height","display","marginRight","defaultValue","allowClear","width","placeholder","name","ref","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b82253c.chunk.js","sourcesContent":["import * as THREE from 'three'; \n\nexport default function Circle(radius,  \n                               pos=new THREE.Vector3(0,0,0), \n                               caxis=new THREE.Vector3(0,0,1), \n                               raxis=new THREE.Vector3(1,0,0)) {\n\nlet circle = {}; \n\ncircle.tracer = new THREE.Vector3(); \ncircle.geometry = new THREE.CircleGeometry( radius, 30 ); \ncircle.material = new THREE.MeshBasicMaterial( { color: 0x0000ff, side: THREE.DoubleSide } );\n\ncircle.pos = function(radians) {\n    this.tracer.copy(raxis); \n    this.tracer.applyAxisAngle(caxis, radians); \n    this.tracer.multiplyScalar(radius); \n    this.tracer.add(pos); \n    return (new THREE.Vector3()).copy(this.tracer);  \n};\n\ncircle.render = function(scene) {\n    let { geometry, material } = this;\n    let mesh = new THREE.Mesh( geometry, material );\n    let { x, y, z } = pos; \n    mesh.position.set(x, y, z); \n    scene.add(mesh); \n}; \n\nreturn circle; \n\n}; ","import * as THREE from \"three\"; \n\nexport function stringToThreeColor(colorStr) {\n    let { r, g, b } = new THREE.Color(colorStr); \n    return new THREE.Vector3(r, g, b); \n}\n\nexport function threejsSetupBasics(container) {\n    /*\n    Setup scene, camera, and renderer. \n    Append the renderer to a specified container \n    */\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, .1, 1000 );\n    let renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    container.appendChild( renderer.domElement ); \n    return { scene, camera, renderer }; \n}","import * as THREE from \"three\"; \nimport * as dat from 'dat.gui';\nimport glslify from 'glslify'\nimport _ from \"lodash\";\nimport OrbitControls from \"orbit-controls-es6\"; \nimport Circle from \"./Circle\"; \nimport { stringToThreeColor, threejsSetupBasics } from \"./util\"; \n\n\nexport default function SpiralizationEngine(container) {\n\n    this.start = () => {\n\n      // Origin of the world coordinate system \n      let origin = new THREE.Vector3(0, 0, 0); \n\n      // Colors have array representation for iteration and \n      // object index mapping representation for control via dat.gui \n      this.colorsArr = [\n        // Material design palette \n        // https://www.materialpalette.com/colors\n        'rgb(244, 67, 54)',   // red\n        'rgb(233, 30, 99)',   // pink \n        'rgb(156, 39, 176)',  // purple\n        'rgb(103, 58, 183)',  // deep purple \n        'rgb(63, 81, 181)',   // indigo \n        'rgb(33, 150, 243)',  // blue \n        'rgb(3, 169, 244)',   // light blue \n        'rgb(0, 188, 212)',   // cyan \n        'rgb(0, 150, 136)',   // teal \n        'rgb(76, 175, 80)',   // green \n        'rgb(139, 195, 74)',  // light green\n        'rgb(205, 220, 57)',  // lime green \n        'rgb(255, 235, 59)',  // yellow \n        'rgb(255, 193, 7)',   // amber \n        'rgb(255, 152, 0)',   // orange \n        'rgb(255, 87, 34)',   // deep orange \n      ]; \n      this.colorsObj = _.range(0, this.colorsArr.length).reduce((acc, cur, i) => {\n        acc[cur] = this.colorsArr[cur]; \n        return acc; \n      }, {}); \n\n      this.setCameraStateToDefaults = (camera) => {\n\n        this.nearClipDistance = .1; \n        this.farClipDistance = 400; \n        this.fovDegrees = 40; \n\n        camera.fov = this.fovDegrees;\n        camera.aspect = window.innerWidth / window.innerHeight; \n        camera.near = this.nearClipDistance; \n        camera.far = this.farClipDistance; \n        \n        // Must be called after any change to the camera parameters \n        camera.updateProjectionMatrix(); \n\n      }; \n\n      this.setAnimationStateToDefaults = () => {\n\n        this.cameraStepPerFrame = .3;                               \n        this.rotate = false; \n        this.glide = false; \n        this.forward = true; \n        this.rotateStep = Math.PI / 180; \n\n      }; \n\n      this.setEngineDerivedProperties = () => {\n\n        this.angularStep = Math.PI * 2 / this.numAngularSteps;                               \n        this.angularIndicesToRender = _.range(0, this.numAngularSteps); \n\n      }\n\n      this.setEngineToDefaultState = () => {\n        \n        // Geometric System parameters \n        this.planeHeight = 3;                                       \n        this.numAngularSteps = 12;                                  \n        this.numObjectsPerAngle = 25;                                \n        this.radius = 5;                                            \n        this.angularOffset = 0;       \n        this.uniformZSpacing = 1;      \n        this.focalDilationFrontFar = 1; \n        this.focalDilationFrontNear = .77; \n        this.parabolicDistortion = 1.0;\n        this.lensWidthFar = this.planeHeight / 2; \n        this.lensWidthNear = this.lensWidthFar * .75;\n        this.angularStep = Math.PI * 2 / this.numAngularSteps;\n        this.lensAngularStep = this.angularStep / 3.5; \n\n      };\n\n      this.setAnimationStateToDefaults(); \n      this.setEngineToDefaultState(); \n      this.setEngineDerivedProperties(); \n\n      this.planeSetByAngularIndex = {};                                       \n      this.geometries = {}; \n      this.transforms = {};  \n\n      // Uniforms for shaders \n      this.uniforms = { \n        \"time\": { \n          value: 1.0 \n        },\n        \"speed\": {\n          value: 6.0 \n        },\n        \"colors\": {\n          'type': 'v3v', \n          'value': this.colorsArr.map(stringToThreeColor)\n        }, \n        'parabolicDistortion': {\n          value: this.parabolicDistortion\n        }\n      };\n  \n      // Setup world \n      let { scene, camera, renderer } = threejsSetupBasics(container); \n      this.setCameraStateToDefaults(camera); \n      let clock = new THREE.Clock();\n  \n      // Add some lighting \n      scene.add( new THREE.AmbientLight( 0x404040 ) );\n      camera.add( new THREE.PointLight( 0xffffff, 1 ) );\n  \n      this.clearScene = function() {\n        while (scene.children.length > 0) { \n          scene.remove(scene.children[0]); \n        }\n      }\n      \n      // let controls = new OrbitControls( camera, renderer.domElement );\n      // controls.enabled = true;\n  \n      let vertexShader = document.getElementById('vertex-shader-uv-parabolic').textContent;\n      let cyclingDiscreteGradientShader = document.getElementById('fragment-shader-cycling-discrete-gradient').textContent; \n      let cyclingGradientMaterial = new THREE.ShaderMaterial({ \n        uniforms: this.uniforms, \n        vertexShader, \n        fragmentShader: cyclingDiscreteGradientShader,\n        side: THREE.DoubleSide, \n        defines: {\n          NUMCOLORS: this.colorsArr.length \n        }\n      });\n\n      // Reusable objects for transform computation\n      let initPos = new THREE.Vector3( 0, 0, 0 ); \n      let nPos = new THREE.Vector3(); \n      let fPos = new THREE.Vector3(); \n      let planeMath = new THREE.Plane(); \n      let zMat4 = new THREE.Matrix4(); \n      let mat4 = new THREE.Matrix4(); \n      let q1 = new THREE.Quaternion();\n      let q2 = new THREE.Quaternion();\n      let v0 = new THREE.Vector3(); \n      let v1 = new THREE.Vector3(); \n      let v2 = new THREE.Vector3(); \n      let cross = new THREE.Vector3(); \n      let center = new THREE.Vector3(); \n      let v4 = new THREE.Vector3(); \n      let v5 = new THREE.Vector3(); \n      let unitZ = new THREE.Vector3( 0, 0, 1 ); \n      let planeGeometry = null; \n      let endVertices = null; \n      let sind = 1; \n      let eind = 1; \n  \n      this.renderObjects = (config) => {\n\n        if (config) {\n\n          // Reset to default state \n          this.setEngineToDefaultState(); \n\n          // Override default state with specified properties \n          let keys = Object.keys(config); \n          for (let k of keys) {\n            this[k] = config[k]; \n          }\n\n          // Compute derived properties \n          this.setEngineDerivedProperties();    \n          \n          // set uniforms if specifed in config \n          if (config.parabolicDistortion) {\n            this.uniforms.parabolicDistortion.value = config.parabolicDistortion; \n          }\n\n          // update camera if position specified \n          if (config.cameraPos) {\n            camera.position.set(...config.cameraPos); \n            camera.updateProjectionMatrix(); \n          }\n\n        }\n\n        // 3 conical slices \n        let cNear = new Circle(this.radius * this.focalDilationFrontNear,\n                               nPos.copy(initPos).add(new THREE.Vector3(0, 0, this.lensWidthNear))); \n        let cMiddle = new Circle(this.radius, initPos); \n        let cFar = new Circle(this.radius * this.focalDilationFrontFar,\n                              fPos.copy(initPos).add(new THREE.Vector3(0, 0, this.lensWidthFar))); \n\n        let computeTransforms = () => {\n\n          for (let i = 0; i < this.numAngularSteps; i++) {\n  \n            let rad = (this.angularStep * i) + this.angularOffset; \n  \n            let p1 = cNear.pos(rad - this.lensAngularStep); \n            let p2 = cMiddle.pos(rad); \n            let p3 = cFar.pos(rad + this.lensAngularStep); \n\n            let planeWidth = p1.distanceTo(p3); \n\n            planeGeometry = new THREE.PlaneGeometry( planeWidth, this.planeHeight, 30 ); \n            let plane = new THREE.Mesh( planeGeometry, cyclingGradientMaterial ); \n            planeMath.setFromCoplanarPoints(p1, p2, p3); \n\n            cross.crossVectors( \n              (new THREE.Vector3()).subVectors(p3, p1).normalize(), \n              planeMath.normal \n            )\n            .normalize(); \n            \n            if (cross.z > 0) {\n              cross.negate();\n            }\n            v0.copy(cross).multiplyScalar(this.planeHeight); \n            v1.copy(v0).multiplyScalar(.5); \n            v2.lerpVectors(p1, p3, .5); \n            center.addVectors(v2, v1); \n            v4.addVectors(p3, v0); \n            v5.addVectors(p1, v0); \n\n            endVertices = [p1, p3, v4, v5];\n\n            let transform = new THREE.Matrix4();  \n\n            // q1 rotates plane so we are orthogonal to target planar surface \n            q1.setFromUnitVectors(unitZ, planeMath.normal); \n\n            /*\n            1. rotate so we are orthogonal to the target planar surface \n            2. translate so plane is centered on correct point \n            */\n            transform.multiply(mat4.makeTranslation(center.x, center.y, center.z)); \n            transform.multiply(mat4.makeRotationFromQuaternion(q1)); \n\n            q2.setFromUnitVectors(\n              v0\n                .copy(plane.geometry.vertices[sind])\n                .applyMatrix4(transform)\n                .sub(center)\n                .normalize(), \n              v1.subVectors(endVertices[eind], center)\n                .normalize()\n            ); \n\n            transform.identity(); \n            // transform.multiply(mat4.makeTranslation(center.x, center.y, center.z)); \n            transform.multiply(mat4.makeRotationFromQuaternion(q1.premultiply(q2))); \n\n            this.transforms[i] = transform; \n            this.geometries[i] = planeGeometry;\n              \n          }\n\n        }; \n\n        let renderPlanes = () => {\n\n          for (let i = 0; i < this.numAngularSteps; i++) {     \n            \n            if (!this.planeSetByAngularIndex[i]) {\n              this.planeSetByAngularIndex[i] = []; \n            }\n\n            for (let j = 0; j < this.numObjectsPerAngle; j++) {\n                \n              zMat4.identity();\n              zMat4.makeTranslation(0, 0, j); \n              \n              let plane = new THREE.Mesh( planeGeometry, cyclingGradientMaterial ); \n              plane.applyMatrix(this.transforms[i].premultiply(zMat4)); \n              scene.add(plane); \n              \n              this.planeSetByAngularIndex[i].push(plane); \n  \n            }\n          }\n\n        }\n\n        computeTransforms();\n        renderPlanes(); \n  \n      }\n  \n      // Set the initial position of the camera \n      let cameraX = origin.x; \n      let cameraY = origin.y; \n      let cameraZ = origin.z; \n  \n      camera.position.set(cameraX, cameraY, cameraZ - 12);\n      camera.lookAt(cameraX, cameraY, cameraZ + 1);     \n  \n      let animate = () => {\n        requestAnimationFrame( animate );\n        this.uniforms.time.value += clock.getDelta(); \n        if (this.farClipDistance !== camera.far) {\n          camera.far = this.farClipDistance; \n          camera.updateProjectionMatrix();\n        }\n        if (this.glide) {\n          camera.position.set(0, 0, camera.position.z + this.cameraStepPerFrame * (this.forward ? 1 : -1));\n        }\n        if (this.rotate) {\n          let { rotation } = camera; \n          let { x, y, z } = rotation; \n          camera.rotation.set(x, y, z + this.rotateStep); \n        }\n        // controls.update();\n        renderer.render( scene, camera );\n      }\n  \n      this.fullReRender = (config) => {\n        this.clearScene(); \n        this.renderObjects(typeof config === 'object' ? config : null);\n      }\n  \n      this.renderObjects(); \n  \n      this.enableGuiControls = () => {\n  \n        const gui = new dat.GUI();\n  \n        gui.add(this, 'farClipDistance', 100, 1000).step(10);\n        gui.add(this, 'cameraStepPerFrame', 0, 10).step(.05);  \n        gui.add(this, 'rotate').listen(); \n        gui.add(this, 'glide').listen(); \n        gui.add(this, 'forward');\n    \n        let c1 = gui.add(this, 'radius', .1, 10).step(.5).listen();\n        let c2 = gui.add(this, 'lensWidthFar', 0, 10).step(.1).listen();\n        let c3 = gui.add(this, 'lensWidthNear', 0, 10).step(.1).listen();\n        let c4 = gui.add(this, 'focalDilationFrontNear', .01, 1).listen(); \n        let c5 = gui.add(this, 'focalDilationFrontFar', .01, 1).listen(); \n        let c6 = gui.add(this, 'lensAngularStep', 0, Math.PI * 2).step(Math.PI * 2 / 100).listen();\n        let c8 = gui.add(this, 'planeHeight', .5, 8).step(.125).listen();\n        let c10 = gui.add(this, 'parabolicDistortion', 0, 10).step(.25).listen(); \n    \n        for (let c of [c1, c2, c3, c4, c5, c6, c8]) c.onChange(this.fullReRender);\n\n        let c7 = gui.add(this, 'numAngularSteps', 1, 24).step(1).listen(); \n        c7.onChange(v => {\n          // angularStep is a derived property of numAngularSteps\n          this.numAngularSteps = v;\n          this.angularStep = Math.PI * 2 / v; \n          this.fullReRender(); \n        })\n\n        // Update the uniforms passed to the shader \n        c10.onChange(v => this.uniforms.parabolicDistortion.value = v); \n\n        // Add mechanism for updating individual colors of gradient \n        let colorC = gui.addFolder('color'); \n        for (let i = 0; i < this.colorsArr.length; i++) {\n          colorC.addColor(this.colorsObj, i)\n          .onChange(_.partial((index, newColor) => {\n            this.uniforms.colors.value[index] = stringToThreeColor(newColor); \n          }, i)); \n        }\n\n      }; \n  \n      animate();\n\n    }\n\n  }","const configs = {\n\n    'one': {\n\n        rotate: true, \n        glide: false, \n\n        radius: 2, \n        lensWidthFar: 1.5, \n        lensWidthNear: 1.1, \n        focalDilationFrontNear: .77, \n        focalDilationFrontFar: 1, \n        lensAngularStep: .15, \n        numAngularSteps: 12, \n        planeHeight: 3, \n        parabolicDistortion: 1, \n\n        cameraPos: [0, 0, -8.4]\n\n    }, \n\n    'two': {\n\n        rotate: true,\n        glide: false, \n\n        radius: 5, \n        lensWidthFar: 3.3, \n        lensWidthNear: 3.9, \n        focalDilationFrontNear: .17, \n        focalDilationFrontFar: .2, \n        lensAngularStep: 3.76, \n        numAngularSteps: 24, \n        planeHeight: 4, \n        parabolicDistortion: 1,\n\n        cameraPos: [0, 0, -9.6]\n\n    }, \n\n    'three': {\n\n        rotate: true,\n        glide: false, \n\n        radius: 1, \n        lensWidthFar: 2.8, \n        lensWidthNear: 5.5, \n        focalDilationFrontNear: 1, \n        focalDilationFrontFar: 1, \n        lensAngularStep: .5, \n        numAngularSteps: 24, \n        planeHeight: 2, \n        parabolicDistortion: .25,\n\n        cameraPos: [0, 0, -5.8]\n\n    }, \n\n    'four': {\n\n        rotate: true,\n        glide: false, \n\n        radius: 1, \n        lensWidthFar: 3.6, \n        lensWidthNear: 3.6, \n        focalDilationFrontNear: .43, \n        focalDilationFrontFar: .8, \n        lensAngularStep: .063, \n        numAngularSteps: 24, \n        planeHeight: 1.5, \n        parabolicDistortion: .75,\n\n        cameraPos: [0, 0, -5.8]\n\n    },\n\n    'five': {\n\n        rotate: true,\n        glide: false, \n\n        radius: 1, \n        lensWidthFar: 4.3, \n        lensWidthNear: 3.6, \n        focalDilationFrontNear: .43, \n        focalDilationFrontFar: 1, \n        lensAngularStep: .063, \n        numAngularSteps: 24, \n        planeHeight: 8, \n        parabolicDistortion: 1.25,\n\n        cameraPos: [0, 0, -5.8]\n\n    }\n\n};\n\nexport default configs; ","import React, { useEffect, useRef, useState } from 'react';\nimport SpiralizationEngine from \"./threejs/SpiralizationEngine\"; \nimport configs from \"./threejs/SpiralizationEngineConfigurations\"; \nimport _ from \"lodash\"; \nimport { Select, Layout } from 'antd'; \n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst { Option } = Select; \nconst { Header, Content } = Layout; \n\nfunction App() {\n\n  const threejsContainer = useRef(null); \n\n  const [initialized, setInitialized] = useState(false);\n  const [configNames, setConfigNames] = useState([]); \n  const [selectedConfig, setSelectedConfig] = useState('five'); \n  const [engine, setEngine] = useState(null); \n\n  useEffect(() => {\n\n    async function startEngine() {\n\n      let engine = new SpiralizationEngine(threejsContainer.current);\n      engine.start(); \n      engine.enableGuiControls(); \n\n      setInitialized(true); \n      setEngine(engine); \n\n    }\n\n    if (threejsContainer.current && !initialized) {\n      startEngine(); \n    }\n\n  }, [threejsContainer]);\n\n  useState(() => {\n\n    // Get the names of all pre-configured presets \n    setConfigNames(Object.keys(configs));\n\n  }, []);\n\n  useEffect(() => {\n\n    if (selectedConfig && initialized) {\n      let config = configs[selectedConfig]; \n      engine.fullReRender(config); \n    }\n\n\n  }, [selectedConfig, initialized]); \n\n  return (\n    <Layout>\n      <Header style={{ padding: '0 15px', borderBottom: '1px solid #e6e6e6', height: 60 }}>\n        <h3 style={{ display: 'inline', color: '#fff', marginRight: 5 }}>Presets: </h3>\n        <Select\n        defaultValue={selectedConfig}\n        allowClear\n        style={{ width: 200 }}\n        placeholder={'Select a configuration'}\n        onChange={(value) => setSelectedConfig(value)}\n        >\n          {configNames.map(name => \n            <Option value={name}>{name}</Option>\n          )}\n        </Select>\n      </Header>\n      <Content>\n        <div ref={threejsContainer}/>\n      </Content>\n    </Layout>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}