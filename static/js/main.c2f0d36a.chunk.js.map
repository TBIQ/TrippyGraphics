{"version":3,"sources":["threejs/Circle.js","threejs/util.js","threejs/SpiralizationEngine.js","threejs/SpiralizationEngineConfigurations.js","App.js","serviceWorker.js","index.js"],"names":["Circle","radius","pos","THREE","caxis","raxis","circle","tracer","geometry","material","color","side","radians","this","copy","applyAxisAngle","multiplyScalar","add","render","scene","mesh","x","y","z","position","set","stringToThreeColor","colorStr","r","g","b","SpiralizationEngine","container","start","colorsArr","colorsObj","_","range","length","reduce","acc","cur","i","setLensAngularStep","lensAngularStep","angularStep","angularStepFactor","setAngularStep","Math","PI","numAngularSteps","recomputeDerivedProperties","nearClipDistance","farClipDistance","fovDegrees","cameraStartPos","cameraStepPerFrame","rotate","glide","forward","rotateStep","planeHeight","numObjectsPerAngle","geometries","transforms","angularOffset","angularIndicesToRender","planeSet","uniformZSpacing","lensWidthFar","lensWidthNear","focalDilationFrontFar","focalDilationFrontNear","parabolicDistortion","curr","uniforms","value","map","camera","window","innerWidth","innerHeight","renderer","setSize","appendChild","domElement","threejsSetupBasics","clock","pointLight","clearScene","children","remove","vertexShader","document","getElementById","textContent","cyclingDiscreteGradientShader","cyclingGradientMaterial","fragmentShader","defines","NUMCOLORS","renderObjects","config","Object","keys","k","initPos","nPos","fPos","cNear","cMiddle","cFar","planeMath","zMat4","mat4","q1","q2","v0","v1","v2","cross","center","v4","v5","unitZ","planeGeometry","endVertices","rad","p1","p2","p3","planeWidth","distanceTo","plane","setFromCoplanarPoints","crossVectors","subVectors","normalize","normal","negate","lerpVectors","addVectors","transform","setFromUnitVectors","multiply","makeTranslation","makeRotationFromQuaternion","vertices","applyMatrix4","sub","identity","premultiply","computeTransforms","j","applyMatrix","push","renderPlanes","cameraX","cameraY","cameraZ","lookAt","fullReRender","enableGuiControls","gui","dat","step","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10","onChange","v","colorC","addFolder","addColor","partial","index","newColor","colors","animate","requestAnimationFrame","time","getDelta","far","updateProjectionMatrix","rotation","configs","Option","Select","Header","Layout","Content","App","threejsContainer","useRef","useState","initialized","setInitialized","configNames","setConfigNames","selectedConfig","setSelectedConfig","engine","setEngine","useEffect","a","current","startEngine","style","padding","borderBottom","height","display","marginRight","defaultValue","allowClear","width","placeholder","name","ref","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2f0d36a.chunk.js","sourcesContent":["import * as THREE from 'three'; \n\nexport default function Circle(radius,  \n                               pos=new THREE.Vector3(0,0,0), \n                               caxis=new THREE.Vector3(0,0,1), \n                               raxis=new THREE.Vector3(1,0,0)) {\n\nlet circle = {}; \n\ncircle.tracer = new THREE.Vector3(); \ncircle.geometry = new THREE.CircleGeometry( radius, 30 ); \ncircle.material = new THREE.MeshBasicMaterial( { color: 0x0000ff, side: THREE.DoubleSide } );\n\ncircle.pos = function(radians) {\n    this.tracer.copy(raxis); \n    this.tracer.applyAxisAngle(caxis, radians); \n    this.tracer.multiplyScalar(radius); \n    this.tracer.add(pos); \n    return (new THREE.Vector3()).copy(this.tracer);  \n};\n\ncircle.render = function(scene) {\n    let { geometry, material } = this;\n    let mesh = new THREE.Mesh( geometry, material );\n    let { x, y, z } = pos; \n    mesh.position.set(x, y, z); \n    scene.add(mesh); \n}; \n\nreturn circle; \n\n}; ","import * as THREE from \"three\"; \n\nexport function stringToThreeColor(colorStr) {\n    let { r, g, b } = new THREE.Color(colorStr); \n    return new THREE.Vector3(r, g, b); \n}\n\nexport function threejsSetupBasics(container) {\n    /*\n    Setup scene, camera, and renderer. \n    Append the renderer to a specified container \n    */\n    // Boilerplate setup \n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, .1, 1000 );\n    let renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    container.appendChild( renderer.domElement ); \n    return { scene, camera, renderer }; \n}","import * as THREE from \"three\"; \nimport * as dat from 'dat.gui';\nimport glslify from 'glslify'\nimport _ from \"lodash\";\nimport OrbitControls from \"orbit-controls-es6\"; \nimport Circle from \"./Circle\"; \nimport { stringToThreeColor, threejsSetupBasics } from \"./util\"; \n\n\nexport default function SpiralizationEngine(container) {\n\n    this.start = () => {\n\n      this.colorsArr = [\n        // Material design palette \n        // https://www.materialpalette.com/colors\n        'rgb(244, 67, 54)',   // red\n        'rgb(233, 30, 99)',   // pink \n        'rgb(156, 39, 176)',  // purple\n        'rgb(103, 58, 183)',  // deep purple \n        'rgb(63, 81, 181)',   // indigo \n        'rgb(33, 150, 243)',  // blue \n        'rgb(3, 169, 244)',   // light blue \n        'rgb(0, 188, 212)',   // cyan \n        'rgb(0, 150, 136)',   // teal \n        'rgb(76, 175, 80)',   // green \n        'rgb(139, 195, 74)',  // light green\n        'rgb(205, 220, 57)',  // lime green \n        'rgb(255, 235, 59)',  // yellow \n        'rgb(255, 193, 7)',   // amber \n        'rgb(255, 152, 0)',   // orange \n        'rgb(255, 87, 34)',   // deep orange \n      ]; \n      this.colorsObj = _.range(0, this.colorsArr.length).reduce((acc, cur, i) => {\n        acc[cur] = this.colorsArr[cur]; \n        return acc; \n      }, {}); \n\n      let setLensAngularStep = () => {\n        this.lensAngularStep = this.angularStep / this.angularStepFactor;\n      };\n\n      let setAngularStep = () => {\n        this.angularStep = Math.PI * 2 / this.numAngularSteps; \n      };\n\n      this.recomputeDerivedProperties = () => {\n        setLensAngularStep(); \n        setAngularStep();\n      }\n  \n      // Camera settings \n      this.nearClipDistance = .1; \n      this.farClipDistance = 400; \n      this.fovDegrees = 40; \n      this.cameraStartPos = new THREE.Vector3(0, 0, 0); \n  \n      // Animation settings \n      this.cameraStepPerFrame = 1;                                // controls the speed of the camera during animation\n      this.rotate = false; \n      this.glide = false; \n      this.forward = true; \n      this.rotateStep = Math.PI / 180; \n  \n      // Spatial / Geometric settings \n      this.planeHeight = 3;                                       // height of planes used in animation \n      this.numAngularSteps = 12;                                  // number of angular steps at which a stream of objects is rendered\n      this.numObjectsPerAngle = 40;                               // at each angular step, we render this many objects \n      setAngularStep();                                           // the angular stepping distance for object rendering\n      this.radius = 7;                                            // the radius of the tunnel \n      this.angularStepFactor = 3.5; \n      setLensAngularStep();          \n                             \n      this.geometries = {}; \n      this.transforms = {};                                       // the matrix to apply streamwise at each angular step \n      this.angularOffset = 0;                                     // the angle from which we start stepping around the circle \n      this.angularIndicesToRender = null;                         // if the element i is in this array, render objects at the ith angular step \n      this.planeSet = null;                                       // the set of objects rendered at the ith angular step mapped by index \n      this.uniformZSpacing = 1;                                   // distance between objects rendered within a single stream \n      \n      this.lensWidthFar = this.planeHeight / 2; \n      this.lensWidthNear = this.lensWidthFar * .75;\n      this.focalDilationFrontFar = 1; \n      this.focalDilationFrontNear = .77; \n\n      this.parabolicDistortion = 1.0; \n  \n      // Initialize with values \n      this.angularIndicesToRender = _.range(0, this.numAngularSteps); \n      this.planeSet = _.range(0, this.numAngularSteps).reduce((acc, curr) => {\n        acc[curr] = []; \n        return acc; \n      }, {}); \n\n      this.uniforms = { \n        \"time\": { \n          value: 1.0 \n        },\n        \"speed\": {\n          value: 6.0 \n        },\n        \"colors\": {\n          'type': 'v3v', \n          'value': this.colorsArr.map(stringToThreeColor)\n        }, \n        'parabolicDistortion': {\n          value: this.parabolicDistortion\n        }\n      };\n  \n      let { scene, camera, renderer } = threejsSetupBasics(container); \n      let clock = new THREE.Clock();\n  \n      scene.add( new THREE.AmbientLight( 0x404040 ) );\n      let pointLight = new THREE.PointLight( 0xffffff, 1 );\n      camera.add( pointLight );\n  \n      this.clearScene = function() {\n        while (scene.children.length > 0) { \n          scene.remove(scene.children[0]); \n        }\n      }\n      \n      // let controls = new OrbitControls( camera, renderer.domElement );\n      // controls.enabled = true;\n  \n      let vertexShader = document.getElementById('vertex-shader-uv-parabolic').textContent;\n      let cyclingDiscreteGradientShader = document.getElementById('fragment-shader-cycling-discrete-gradient').textContent; \n      let cyclingGradientMaterial = new THREE.ShaderMaterial({ \n        uniforms: this.uniforms, \n        vertexShader, \n        fragmentShader: cyclingDiscreteGradientShader,\n        side: THREE.DoubleSide, \n        defines: {\n          NUMCOLORS: this.colorsArr.length \n        }\n      });\n  \n      this.renderObjects = (config) => {\n\n        // If configuration is specified, update current state \n        if (config) {\n          let keys = Object.keys(config); \n          for (let k of keys) {\n            this[k] = config[k]; \n          }\n        }\n\n        this.recomputeDerivedProperties();\n  \n        // Positions used to define the conical slices \n        let initPos = new THREE.Vector3(0,0,0); \n        let nPos = new THREE.Vector3(); \n        let fPos = new THREE.Vector3(); \n  \n        // 3 conical slices \n        let cNear = new Circle(this.radius * this.focalDilationFrontNear,\n                               nPos.copy(initPos).add(new THREE.Vector3(0, 0, this.lensWidthNear))); \n        let cMiddle = new Circle(this.radius, initPos); \n        let cFar = new Circle(this.radius * this.focalDilationFrontFar,\n                              fPos.copy(initPos).add(new THREE.Vector3(0, 0, this.lensWidthFar))); \n  \n        // Reusable objects used to determine transforms \n        let planeMath = new THREE.Plane(); \n        let zMat4 = new THREE.Matrix4(); \n        let mat4 = new THREE.Matrix4(); \n        let q1 = new THREE.Quaternion();\n        let q2 = new THREE.Quaternion();\n        let v0 = new THREE.Vector3(); \n        let v1 = new THREE.Vector3(); \n        let v2 = new THREE.Vector3(); \n        let cross = new THREE.Vector3(); \n        let center = new THREE.Vector3(); \n        let v4 = new THREE.Vector3(); \n        let v5 = new THREE.Vector3(); \n        let unitZ = new THREE.Vector3( 0, 0, 1 ); \n        let planeGeometry = null; \n        let endVertices = null; \n        let sind = 1; \n        let eind = 1; \n\n        let computeTransforms = () => {\n\n          for (let i = 0; i < this.numAngularSteps; i++) {\n  \n            let rad = (this.angularStep * i) + this.angularOffset; \n  \n            let p1 = cNear.pos(rad - this.lensAngularStep); \n            let p2 = cMiddle.pos(rad); \n            let p3 = cFar.pos(rad + this.lensAngularStep); \n\n            let planeWidth = p1.distanceTo(p3); \n\n            planeGeometry = new THREE.PlaneGeometry( planeWidth, this.planeHeight, 30 ); \n            let plane = new THREE.Mesh( planeGeometry, cyclingGradientMaterial ); \n            planeMath.setFromCoplanarPoints(p1, p2, p3); \n\n            cross.crossVectors( \n              (new THREE.Vector3()).subVectors(p3, p1).normalize(), \n              planeMath.normal \n            )\n            .normalize(); \n            \n            if (cross.z > 0) {\n              cross.negate();\n            }\n            v0.copy(cross).multiplyScalar(this.planeHeight); \n            v1.copy(v0).multiplyScalar(.5); \n            v2.lerpVectors(p1, p3, .5); \n            center.addVectors(v2, v1); \n            v4.addVectors(p3, v0); \n            v5.addVectors(p1, v0); \n\n            endVertices = [p1, p3, v4, v5];\n\n            let transform = new THREE.Matrix4();  \n\n            // q1 rotates plane so we are orthogonal to target planar surface \n            q1.setFromUnitVectors(unitZ, planeMath.normal); \n\n            /*\n            1. rotate so we are orthogonal to the target planar surface \n            2. translate so plane is centered on correct point \n            */\n            transform.multiply(mat4.makeTranslation(center.x, center.y, center.z)); \n            transform.multiply(mat4.makeRotationFromQuaternion(q1)); \n\n            q2.setFromUnitVectors(\n              v0\n                .copy(plane.geometry.vertices[sind])\n                .applyMatrix4(transform)\n                .sub(center)\n                .normalize(), \n              v1.subVectors(endVertices[eind], center)\n                .normalize()\n            ); \n\n            transform.identity(); \n            // transform.multiply(mat4.makeTranslation(center.x, center.y, center.z)); \n            transform.multiply(mat4.makeRotationFromQuaternion(q1.premultiply(q2))); \n\n            this.transforms[i] = transform; \n            this.geometries[i] = planeGeometry;\n              \n          }\n\n        }; \n\n        let renderPlanes = () => {\n\n          for (let i = 0; i < this.numAngularSteps; i++) {     \n            \n            if (!this.planeSet[i]) {\n              this.planeSet[i] = []; \n            }\n\n            for (let j = 0; j < this.numObjectsPerAngle; j++) {\n                \n              zMat4.identity();\n              zMat4.makeTranslation(0, 0, j); \n              \n              let plane = new THREE.Mesh( planeGeometry, cyclingGradientMaterial ); \n              plane.applyMatrix(this.transforms[i].premultiply(zMat4)); \n              scene.add(plane); \n              \n              this.planeSet[i].push(plane); \n  \n            }\n          }\n\n        }\n\n        computeTransforms();\n        renderPlanes(); \n  \n        \n      }\n  \n      // Set the initial position of the camera \n      let cameraX = this.cameraStartPos.x; \n      let cameraY = this.cameraStartPos.y; \n      let cameraZ = this.cameraStartPos.z; \n  \n      camera.position.set(cameraX, cameraY, cameraZ - 12);\n      camera.lookAt(cameraX, cameraY, cameraZ + 1);     \n  \n      let animate = () => {\n        requestAnimationFrame( animate );\n        this.uniforms.time.value += clock.getDelta(); \n        if (this.farClipDistance !== camera.far) {\n          camera.far = this.farClipDistance; \n          camera.updateProjectionMatrix();\n        }\n        if (this.glide) {\n          camera.position.set(0, 0, camera.position.z + this.cameraStepPerFrame * (this.forward ? 1 : -1));\n        }\n        if (this.rotate) {\n          let { rotation } = camera; \n          let { x, y, z } = rotation; \n          camera.rotation.set(x, y, z + this.rotateStep); \n        }\n        // controls.update();\n        renderer.render( scene, camera );\n      }\n  \n      this.fullReRender = (config) => {\n        this.clearScene(); \n        this.renderObjects(config);\n      }\n\n  \n      this.renderObjects(); \n  \n      this.enableGuiControls = () => {\n  \n        const gui = new dat.GUI();\n  \n        gui.add(this, 'farClipDistance', 100, 1000).step(10);\n        gui.add(this, 'cameraStepPerFrame', 0, 10).step(.05);  \n        gui.add(this, 'rotate'); \n        gui.add(this, 'glide'); \n        gui.add(this, 'forward');\n    \n        let c1 = gui.add(this, 'radius', .1, 10).step(.5);\n        let c2 = gui.add(this, 'lensWidthFar', 0, 10).step(.1);\n        let c3 = gui.add(this, 'lensWidthNear', 0, 10).step(.1);\n        let c4 = gui.add(this, 'focalDilationFrontNear', .01, 1); \n        let c5 = gui.add(this, 'focalDilationFrontFar', .01, 1); \n        let c6 = gui.add(this, 'lensAngularStep', 0, Math.PI * 2).step(Math.PI * 2 / 100);\n        let c7 = gui.add(this, 'numAngularSteps', 1, 24).step(1); \n        let c8 = gui.add(this, 'planeHeight', .5, 8).step(.125);\n        let c9 = gui.add(this, 'angularStepFactor', .5, 10).step(.5); \n        let c10 = gui.add(this, 'parabolicDistortion', 0, 10).step(.25); \n    \n        for (let c of [c1, c2, c3, c4, c5, c6, c7, c8, c9]) c.onChange(this.fullReRender);\n\n        // Update the uniforms passed to the shader \n        c10.onChange(v => this.uniforms.parabolicDistortion.value = v); \n\n        // Add mechanism for updating individual colors of gradient \n        let colorC = gui.addFolder('color'); \n        for (let i = 0; i < this.colorsArr.length; i++) {\n          colorC.addColor(this.colorsObj, i)\n          .onChange(_.partial((index, newColor) => {\n            this.uniforms.colors.value[index] = stringToThreeColor(newColor); \n          }, i)); \n        }\n        \n      }; \n  \n      animate();\n\n    }\n\n  }","const configs = {\n\n    'rotatingSplitColorBleed': {\n        // Zoom in real close with the camera for this one \n        lensWidthFar: 7.4, \n        lensWidthNear: 2.2, \n        focalDilationFrontNear: .64, \n        focalDilationFrontFar: .5, \n        lensAngularStep: 3.58 \n\n    }, \n\n    'triangularPrismLeaves': {\n        lensWidthFar: 0, \n        lensWidthNear: 1.6, \n        focalDilationFrontNear: .94, \n        focalDilationFrontFar: 1, \n        lensAngularStep: .062, \n\n    }, \n\n    'geometricTunnel': {\n        lensWidthFar: 2, \n        lensWidthNear: 7.5, \n        focalDilationFrontNear: .77, \n        focalDilationFrontFar: 1, \n        lensAngularStep: .15\n    }\n\n};\n\nexport default configs; ","import React, { useEffect, useRef, useState } from 'react';\nimport SpiralizationEngine from \"./threejs/SpiralizationEngine\"; \nimport configs from \"./threejs/SpiralizationEngineConfigurations\"; \nimport _ from \"lodash\"; \nimport { Select, Layout } from 'antd'; \n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst { Option } = Select; \nconst { Header, Content } = Layout; \n\nfunction App() {\n\n  const threejsContainer = useRef(null); \n\n  const [initialized, setInitialized] = useState(false);\n  const [configNames, setConfigNames] = useState([]); \n  const [selectedConfig, setSelectedConfig] = useState(null); \n  const [engine, setEngine] = useState(null); \n\n  useEffect(() => {\n\n    async function startEngine() {\n\n      let engine = new SpiralizationEngine(threejsContainer.current);\n      engine.start(); \n      engine.enableGuiControls(); \n\n      setInitialized(true); \n      setEngine(engine); \n\n    }\n\n    if (threejsContainer.current && !initialized) {\n      startEngine(); \n    }\n\n  }, [threejsContainer]);\n\n  useState(() => {\n\n    // Get the names of all pre-configured presets \n    setConfigNames(Object.keys(configs));\n\n  }, []);\n\n  useEffect(() => {\n\n    if (selectedConfig) {\n      let config = configs[selectedConfig]; \n      engine.fullReRender(config); \n    }\n\n\n  }, [selectedConfig]); \n\n  return (\n    <Layout>\n      <Header style={{ padding: '0 15px', borderBottom: '1px solid #e6e6e6', height: 60 }}>\n        <h3 style={{ display: 'inline', color: '#fff', marginRight: 5 }}>Presets: </h3>\n        <Select\n        defaultValue={selectedConfig}\n        allowClear\n        style={{ width: 200 }}\n        placeholder={'Select a configuration'}\n        onChange={(value) => setSelectedConfig(value)}\n        >\n          {configNames.map(name => \n            <Option value={name}>{name}</Option>\n          )}\n        </Select>\n      </Header>\n      <Content>\n        <div ref={threejsContainer}/>\n      </Content>\n    </Layout>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}